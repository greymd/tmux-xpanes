#!/bin/bash
set -e

# @Author yasuhiro.yamada
# @Filename xpanes
readonly VERSION="1.3.0"

trap "exit 130" SIGHUP SIGINT SIGQUIT SIGTERM

# THIS_FILE_NAME is supposed to be "xpanes".
readonly THIS_FILE_NAME="${0##*/}"
readonly THIS_DIR="$(cd "$(dirname "${BASH_SOURCE[0]:-${(%):-%N}}")"; pwd)"
readonly ABS_THIS_FILE_NAME="$THIS_DIR/$THIS_FILE_NAME"

__xpanes::usage() {
    echo "Usage:"
    echo "  $THIS_FILE_NAME [OPTIONS] [argument ...]"
    echo
    echo "OPTIONS:"
    echo "  -h --help                    Show this screen."
    echo "  -V --version                 Show version."
    echo "  -c utility                   Specify utility which is executed as a command in each panes. If utility is omitted, echo(1) is used."
    echo "  -I replstr                   Replacing one or more occurrences of replstr in utility given by -c option."
    echo "  -S socket-path               Specify a full alternative path to the server socket."
    echo "  -l --log[=<directory>]       Enable logging and store log files to $LOG_DIR or given <directory>."
    echo "     --log-format=<FORMAT>     File name of log files follows given <FORMAT>."
    echo "  -d --desync                  Make synchronize-panes option off on new window."
    echo
}

__xpanes::usage_verbose() {
    echo " FORMAT:"
    echo "     Default value is \"$LOG_FORMAT\""
    echo "     Interpreted sequences are:"
    echo "     [:PID:]   Process id of the tmux session. (e.g, 41531)"
    echo "     [:ARG:]   Host name to which the pane is logging in. (e.g, userA@serverA)"
    echo
    echo '     In addition, sequences same as `date` command are available.'
    echo
    echo "     For example:"
    echo "     %Y   year  (e.g, 1960)"
    echo "     %m   month (e.g, 01)"
    echo "     %d   date  (e.g, 31)"
    echo "     And etc."
    echo "     Other sequences are available. Please refer to date(1) manual."
    echo
    echo " Examples:"
    echo "     $ $THIS_FILE_NAME arg1 arg2 arg3 arg4"
    echo "     New window is created and then, it will be separated into four panes."
    echo
    echo "     $ $THIS_FILE_NAME arg{1..4}"
    echo "     Four panes will be created."
    echo "     Brace expansion is useful."
    echo
    echo "     $ $THIS_FILE_NAME -l -c 'ssh {}' user1@host1 user1@host1"
    echo "     New window is created and it will be separated into two panes."
    echo "     And also $LOG_DIR/user1@host1-1.log.2016-01-31_23-59-59.log"
    echo "     and      $LOG_DIR/user1@host1-2.log.2016-01-31_23-59-59.log"
    echo "     will be created as their log files."
    echo
    echo "     $ $THIS_FILE_NAME -l --log=/tmp/logs -c 'ssh {}' user1@host1 user2@host2"
    echo "     Following files will be created."
    echo "     /tmp/logs/user1@host1-1.log.2016-01-31_23-59-59.log"
    echo "     /tmp/logs/user2@host2-1.log.2016-01-31_23-59-59.log"
    echo "     will be created as their log files."
    echo
}

# Show version number
__xpanes::version() {
    echo "$THIS_FILE_NAME $VERSION"
}

# Get version number for tmux
__xpanes::get_tmux_version() {
    local _tmux_version=""
    tmux -V &> /dev/null
    if [ $? -ne 0 ]; then
        # From tmux 0.9 to 1.3, there is no -V option.
        _tmux_version="tmux 0.9-1.3"
    else
        _tmux_version="$(tmux -V)"
    fi
    echo "$_tmux_version" | perl -anle 'printf $F[1]'
}

__xpanes::get_tmux_conf() {
    local _conf_name="$1"
    tmux show-window-options -g | grep "^${1}" | head -n 1 | perl -anle 'print $F[1]'
}

#
# Generate log file names from given arguments.
# Usage:
#        echo <host1> <host2> ... | __xpanes::log_filenames <FORMAT>
# Return:
#        File names.
# Example:
#        $ echo aaa bbb ccc aaa ccc ccc | xargs -n 1 | log_filenames '[:ARG:]_[:PID:]_%Y%m%d.log'
#        aaa-1_1234_20160101.log
#        bbb-1_1234_20160101.log
#        ccc-1_1234_20160101.log
#        aaa-2_1234_20160101.log
#        ccc-2_1234_20160101.log
#        ccc-3_1234_20160101.log
#
__xpanes::log_filenames () {
    local _arg_fmt="$1"
    local _full_fmt=$(date '+'$_arg_fmt)
    cat | perl -nle 'print $_."-".(($h{$_}++)+1)' | while read host ; do
        echo $_full_fmt | \
        sed "s/\[:ARG:\]/$host/g" | \
        sed "s/\[:PID:\]/$$/g"
    done
}

#
# Ensure existance of given directory
# Usage:
#        __xpanes::ensure_directory <direname>
#
__xpanes::ensure_directory() {
    local _dir="$1"

    # Remove end of slash '/'
    _dir="${_dir%/}"

    # tilda expansion
    _dir="${_dir/#~/$HOME}"

    # Check directory.
    if [ ! -e "${_dir}" ]; then
        # Create directory
        if mkdir "${_dir}"; then
            echo "${_dir} is created." >&2
        else
            echo "Failed to create ${_dir}" >&2
            exit 20
        fi
    fi
    if [ ! -d "${_dir}" ]; then
        echo "${_dir} is not directory." >&2
        exit 21
    fi
    if [ ! -w "${_dir}" ]; then
        echo "${_dir} is not writable." >&2
        exit 22
    fi

    # Return absolute path
    echo "$(cd "$LOG_DIR" && pwd)"
}

# Convert array to string which is can be used as command line argument.
# Usage:
#       __xpanes::arr2args <array object>
# Example:
#       array=(aaa bbb "ccc ddd" eee "f'f")
#       __xpanes::arr2args "${array[@]}"
#       @returns "'aaa' 'bbb' 'ccc ddd' 'eee' 'f\'f'"
# Result:
__xpanes::arr2args() {
    local _arg=""
    # If there is no argument, usage will be shown.
    if [ $# -lt 1 ]; then
        return 0
    fi
    for i in "$@" ;do
        _arg="$i"
        # Escaping single quotation.
        echo "$_arg" | sed "s/'/'\"'\"'/g" | sed "s/^/'/;s/$/' /" | tr -d '\n'
    done
}

# Extract first field separated by dot '.'
# ex, $1       =  aaa.bbb.ccc
#     return   =  aaa-12345(PID)
__xpanes::generate_window_name() {
    echo "$1" | \
        tr '.' ' ' | \
        # coron must be replaced because tmux interprets it.
        sed 's/:/;/g' | \
        sed 's/-/_/g' | \
        perl -anle 'printf "$F[0]-'$$'"'
}

#
# Split a new window into multiple panes.
# Usage:
#        run_split <window name> <num of pane>
#
__xpanes::split_window() {
    local _window_name="$1" ; shift
    local _hosts_num="$1"
    for i in $(seq 0 $_hosts_num)
    do
        tmux split-window -t ${_window_name} -h -d
        tmux select-layout even-horizontal

        # Restraining that size of pane's width becomes
        # less than the minimum size which is defined by tmux.
        if [ $i -ge 2 ]; then
            tmux select-layout -t ${_window_name} tiled
        fi
    done
}

__xpanes::enable_logging() {
    local _window_name="$1" ; shift
    local _index_offset="$1" ; shift
    local _log_dir="$1" ; shift
    local _log_format="$1" ; shift
    local _hosts=($@)
    local _hosts_num=$(($# - 1))
    # Generate log files from host list.
    local _logfiles=($(
    for i in $(seq 0 $_hosts_num)
    do
        echo "${_hosts[i]}"
    done | __xpanes::log_filenames "$_log_format"
    ))
    for i in $(seq 0 $_hosts_num)
    do
        # Start logging
        tmux pipe-pane -t ${_window_name}.$(($i + ${_index_offset})) "cat >> '${_log_dir}/${_logfiles[i]}'"
    done
}

__xpanes::send_commands() {
    local _window_name="$1" ; shift
    local _index_offset="$1" ; shift
    local _repstr="$1" ; shift
    local _cmd="$1" ; shift
    local _index=0
    for host in "$@"
    do
        tmux send-keys -t $_window_name.$(($_index + ${_index_offset})) "${_cmd//$_repstr/$host}" C-m
        _index=$(($_index + 1))
    done
}

# Serarate window vertically, when the number of panes is 1 or 2.
__xpanes::arrange_pane_location() {
    local _window_name="$1" ; shift
    local _hosts_num="$1"

    if [ $_hosts_num -eq 1 ]; then
        tmux select-layout -t ${_window_name} even-horizontal
    elif [ $_hosts_num -gt 1 ]; then
        tmux select-layout -t ${_window_name} tiled
    fi
}

#
# Split a new window which was created by tmux into multiple panes.
# Usage:
#        __xpanes::prepare_window <window name> <offset of index> <number of pane>
#
__xpanes::prepare_window()
{
    local _window_name="$1" ; shift
    local _pane_base_index="$1"; shift
    local _pane_num="$1"; shift
    local _attach_flg="$1"

    # Create new window.
    if [ $_attach_flg -eq 1 ]; then
        tmux new-window -n "$_window_name"
    else
        # Keep background
        tmux new-window -n "$_window_name" -d
    fi

    # specify a pane which has the youngest number of index.
    tmux select-pane -t ${_window_name}.${_pane_base_index}

    # split window into multiple panes
    __xpanes::split_window "$_window_name" "$_pane_num"

    ### If the first pane is still remaining,
    ### panes cannot be organized well.
    # Delete the first pane
    tmux kill-pane -t ${_window_name}.${_pane_base_index}

    # Select second pane
    tmux select-pane -t ${_window_name}.${_pane_base_index}
}

# Check whether given command is in the PATH or not.
__xpanes::check_env() {
    local _cmds="$1"
    while read cmd ; do
        type $cmd > /dev/null 2>&1
        if [ $? -ne 0 ]; then
            echo "$cmd is required to work." >&2
            exit 127
        fi
    done < <(echo "$_cmds" | tr ' ' '\n')

    XPANES_CURRENT_TMUX_VERSION="${XPANES_CURRENT_TMUX_VERSION:-$(__xpanes::get_tmux_version)}"
    echo "$XPANES_CURRENT_TMUX_VERSION" | grep -qE "$XPANES_SUPPORT_TMUX_VERSIONS"
    if [ $? -eq 1 ];then
        echo "warning: '$THIS_FILE_NAME' may not work properly!" >&2
        echo "         Current tmux version $XPANES_CURRENT_TMUX_VERSION is out of support." >&2
        echo "         From version $XPANES_SUPPORT_TMUX_VERSION_LOWER to $XPANES_SUPPORT_TMUX_VERSION_UPPER is officially supported."
    fi
    return 0
}

# Following global variables will be used
# in the following functions
# __xpanes::execution
# __xpanes::pre_execution
# __xpanes::parse_options
# __xpanes::main
: "Initialize options" && {
    OPTIONS=()
    ARGS=()
    OPT_IS_SYNC=1
    OPT_KILL_WIN=0
    KILL_WIN_NAME=""
    OPT_DRY_RUN=0
    OPT_ATTACH=1
    OPT_LOG_STORE=0
    LOG_DIR="${LOG_DIR:-$HOME/.$THIS_FILE_NAME-logs}"
    LOG_FORMAT="[:ARG:].log.%Y-%m-%d_%H-%M-%S"
    REPSTR="{}"
    SOCKET_PATH="$HOME/.$THIS_FILE_NAME-socket"
    NO_OPT=0
    CMD_UTILITY="echo {} "
    XPANES_SUPPORT_TMUX_VERSION_LOWER="1.6"
    XPANES_SUPPORT_TMUX_VERSION_UPPER="2.3"
    XPANES_SUPPORT_TMUX_VERSIONS="${XPANES_SUPPORT_TMUX_VERSIONS:-(1.6|1.7|1.8|1.9|1.9a|2.0|2.1|2.2|2.3)}"
    XPANES_DEPENDENCIES="${XPANES_DEPENDENCIES:-tmux perl}"
    # This is supposed to be xpanes-12345(PID)
    readonly SESSION_NAME="$THIS_FILE_NAME-$$"
    # Temporary window name is tmp-12345(PID)
    readonly TMP_WIN_NAME="tmp-$$"
}

__xpanes::pre_execution() {
    # Create new session.
    tmux -S $SOCKET_PATH new-session -s $SESSION_NAME -n $TMP_WIN_NAME -d

    # Append -- flag.
    # Because any arugments may have `-`
    if [ $NO_OPT -eq 1 ]; then
        ARGS=("--" "${ARGS[@]}")
    fi

    local _opts4args=$(__xpanes::arr2args "${OPTIONS[@]}")
    local _args4args=$(__xpanes::arr2args "${ARGS[@]}")

    tmux -S $SOCKET_PATH send-keys -t $SESSION_NAME:$TMP_WIN_NAME \
        "$ABS_THIS_FILE_NAME --kill-window=$TMP_WIN_NAME $_opts4args $_args4args" C-m

    # Avoid attaching (for unit testing).
    if [ $OPT_ATTACH -eq 1 ]; then
        # Go to another condition of this if statement.
        tmux -S $SOCKET_PATH attach-session -t $SESSION_NAME
    fi

}

__xpanes::execution() {
    local _pane_base_index=$(__xpanes::get_tmux_conf 'pane-base-index')
    local _window_name=$(__xpanes::generate_window_name "${ARGS[0]}")
    local _last_host_idx=$((${#ARGS[@]} - 1))

    __xpanes::prepare_window "$_window_name" "$_pane_base_index" "$_last_host_idx" "$OPT_ATTACH"

    if [ $OPT_LOG_STORE -eq 1 ]; then
        __xpanes::enable_logging  "$_window_name" "$_pane_base_index" "$LOG_DIR" "$LOG_FORMAT" "${ARGS[@]}"
    fi

    # Sending ssh opearations for each pane.
    __xpanes::send_commands "$_window_name" "$_pane_base_index" "$REPSTR" "$CMD_UTILITY" "${ARGS[@]}"

    # This is just the author's preference (You can remove next statement.)
    __xpanes::arrange_pane_location "$_window_name" $_last_host_idx

    # Enable broadcasting
    if [ $OPT_IS_SYNC -eq 1 ]; then
        tmux set-window-option -t ${_window_name} synchronize-panes on
    fi

    # Remove original window.
    if [ $OPT_KILL_WIN -eq 1 ]; then
        tmux kill-window -t "$KILL_WIN_NAME"
    fi
}

__xpanes::parse_options() {
    # When this flag becomes 1,
    # rest of the arguments are not
    # handled as options.
    while (( $# > 0 ))
    do
        case "$1" in
            --)
            if [ $NO_OPT -eq 1 ]; then
                ARGS=("${ARGS[@]}" "$1")
                shift
            else
                # Disable any more options
                NO_OPT=1
                shift
            fi
            ;;

            # ----------------
            # Long options
            # ----------------
            --*)
            if [ $NO_OPT -eq 1 ]; then
                ARGS=("${ARGS[@]}" "$1")
                shift
            else
                if [[ "$1" =~ ^--help ]]; then
                    __xpanes::usage
                    __xpanes::usage_verbose
                    exit 0
                fi

                if [[ "$1" =~ ^--version ]]; then
                    __xpanes::version
                    exit 0
                fi

                if [[ "$1" =~ ^--desync ]]; then
                    OPTIONS=("${OPTIONS[@]}" "$1")
                    OPT_IS_SYNC=0
                    shift
                fi

                if [[ "$1" =~ ^--log-format=.* ]]; then
                    OPTIONS=("${OPTIONS[@]}" "$1")
                    OPT_LOG_STORE=1
                    LOG_FORMAT="${1#--log-format=}"
                    shift
                fi

                if [[ "$1" =~ ^--log.* ]]; then
                    OPTIONS=("${OPTIONS[@]}" "$1")
                    OPT_LOG_STORE=1
                    if [[ "$1" =~ ^--log=  ]]; then
                        LOG_DIR="${1#--log=}"
                    fi
                    shift
                fi

                if [[ "$1" =~ ^--dry-run ]]; then
                    OPT_DRY_RUN=1
                    shift
                fi

                if [[ "$1" =~ ^--kill-window=.* ]]; then
                    OPT_KILL_WIN="1"
                    KILL_WIN_NAME="${1#--kill-window=}"
                    shift
                fi

                # For unit testing
                if [[ "$1" =~ ^--no-attach ]]; then
                    OPT_ATTACH=0
                    OPTIONS=("${OPTIONS[@]}" "$1")
                    shift
                fi
            fi
            ;;

            # ----------------
            # Short options
            # ----------------
            -[hVdIcSl]*)
            if [ $NO_OPT -eq 1 ]; then
                ARGS=("${ARGS[@]}" "$1")
                shift
            else
                if [[ "$1" =~ ^-h ]]; then
                    __xpanes::usage
                    __xpanes::usage_verbose
                    exit 0
                fi
                if [[ "$1" =~ ^-V ]]; then
                    __xpanes::version
                    exit 0
                fi

                # Behavior like this.
                # -IAAA         -- REPSTR="AAA"
                # -I AAA BBB    -- REPSTR="AAA"
                # -I"AAA BBB"   -- REPSTR="AAA BBB"
                # -IAAA BBB     -- REPSTR="AAA", ARGS=("BBB")
                if [[ "$1" =~ ^-I ]]; then
                    if [[ "$1" =~ ^-I.+ ]]; then
                        OPTIONS=("${OPTIONS[@]}" "$1")
                        REPSTR="${1#-I}"
                    elif ! [[ "$2" =~ ^-.* ]]; then
                        REPSTR="$2"
                        OPTIONS=("${OPTIONS[@]}" "$1" "$REPSTR")
                        shift
                    fi
                fi

                if [[ "$1" =~ ^-c ]]; then
                    if [[ "$1" =~ ^-c.+ ]]; then
                        OPTIONS=("${OPTIONS[@]}" "$1")
                        CMD_UTILITY="${1#-c}"
                    elif ! [[ "$2" =~ ^-.* ]]; then
                        CMD_UTILITY="$2"
                        OPTIONS=("${OPTIONS[@]}" "$1" "$CMD_UTILITY")
                        shift
                    fi
                fi

                if [[ "$1" =~ ^-S ]]; then
                    if [[ "$1" =~ ^-S.+ ]]; then
                        OPTIONS=("${OPTIONS[@]}" "$1")
                        SOCKET_PATH="${1#-S}"
                    elif ! [[ "$2" =~ ^-.* ]]; then
                        SOCKET_PATH="$2"
                        OPTIONS=("${OPTIONS[@]}" "$1" "$SOCKET_PATH")
                        shift
                    fi
                fi

                if [[ "$1" =~ ^-l ]]; then
                    OPTIONS=("${OPTIONS[@]}" "$1")
                    OPT_LOG_STORE=1
                fi

                if [[ "$1" =~ ^-d ]]; then
                    OPTIONS=("${OPTIONS[@]}" "$1")
                    OPT_IS_SYNC=0
                fi

                shift
            fi
            ;;

            # ----------------
            # Other options
            # ----------------
            -*)
            if [ $NO_OPT -eq 1 ]; then
                ARGS=("${ARGS[@]}" "$1")
                shift
            else
                echo "Invalid option -- '${1#-}'" >&2
                __xpanes::usage
                echo "Try '$THIS_FILE_NAME --help' for more information." >&2
                exit 4
            fi
            ;;

            # ----------------
            # Other arguments
            # ----------------
            *)
            ARGS=("${ARGS[@]}" "$1")
            shift
            ;;

        esac
    done

    # Check the number of given arguments
    if [ ${#ARGS[@]} -eq 0 ]; then
        echo "No arguments are given." >&2
        __xpanes::usage
        echo "Try '$THIS_FILE_NAME --help' for more information." >&2
        exit 5
    fi
}

__xpanes::main() {
    __xpanes::parse_options "$@"
    set +e
    __xpanes::check_env "$XPANES_DEPENDENCIES"
    set -e

    : "Parameter validation" && {
        # Validate log directory.
        # When do dry-run flag is enabled, skip running (this is used to execute unit test of itself).
        if [ $OPT_DRY_RUN -eq 1 ]; then
            return 0
        fi
        if [ $OPT_LOG_STORE -eq 1 ]; then
            LOG_DIR="$(__xpanes::ensure_directory "$LOG_DIR")"
        fi
    }

    #
    # If current shell is NOT in tmux session.
    #
    if ! [ -n "$TMUX" ]; then
        __xpanes::pre_execution

    #
    # If current shell is already in tmux session.
    #
    else
        __xpanes::execution
    fi
    exit 0
}

: "Entry point" && {
    __xpanes::main "$@"
}
